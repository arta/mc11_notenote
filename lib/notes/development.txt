################################################################################
1-20-17: #######################################################################
################################################################################
• Organizing style sheets loading order.
: May turn out to be an issue if handled by Rails' default application.css?
: If/when so, check this out:
  http://www.mattboldt.com/organizing-css-and-sass-rails/

• But, it seems like using Rails' way of ordering works fine out of the box.
: Stylesheets loading order appears respected when given:
  application.css.scss:
    /*
    ...
    *
    *= require normalize          <-
    *= require global               | ........ instead of: `*= require_tree .`
    *= require notes                |
    *= require welcome            <-
    *= require_self
    */
• Nope, works only if simples css are loaded ...

• FAILS when variables and other sass extras are used ...
: Hm, Rails got caught cheating here ... ?!
################################################################################
• Simple User authorization implementation idea/inspiration:

: Remember, devise AUTHENTICATES user; it does NOT provide
  AUTHORIZATION functionality to authorize User's access to specific actions

: This may be employed?

  NotesController:

    def index
      @notes = Note.where( user: current_user ).order( created_at: :desc )
    end

: Write a before_action for member actions that runs after `set_note` and
  compares note's user against current_user:

    @note.user == current_user
################################################################################
